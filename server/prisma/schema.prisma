generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Customer {
  id             Int              @id @default(autoincrement())
  name           String
  phone          String?
  address        String?
  createdAt      DateTime         @default(now())
  transactions   Transaction[]
  customerOrders customer_order[]
}

model MasterItem {
  id        Int      @id @default(autoincrement())
  itemName  String
  createdAt DateTime @default(now())
  
}

model MasterTouch {
  id        Int      @id @default(autoincrement())
  touch     Float
  createdAt DateTime @default(now())
}

model JewelStock {
  id          Int      @id @default(autoincrement())
  jewelName   String
  weight      Float
  stoneWeight Float
  finalWeight Float
  touch       Float
  purityValue Float
  createdAt   DateTime @default(now())
}

model Transaction {
  id         Int      @id @default(autoincrement())
  date       DateTime
  type       String
  value      Float
  goldRate   Float?
  purity     Float
  touch      Float?
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt  DateTime @default(now())
}

model Entry {
  id         Int      @id @default(autoincrement())
  date       DateTime
  type       String
  cashAmount Float?
  goldValue  Float?
  touch      Float?
  purity     Float?
  goldRate   Float?
  createdAt  DateTime @default(now())
}

model customer_order {
  id             Int @id @default(autoincrement())
  customer_id    Int
  order_group_id Int

  item_name     String
  description   String
  weight        Float
  image         String?
  due_date      DateTime?
  status        String                    @default("Pending")
  worker_name   String?
  created_at    DateTime                  @default(now())
  updatedAt     DateTime                  @default(now())
  customers     Customer                  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  productImages product_multiple_images[]
}

model product_multiple_images {
  id                   Int            @id @default(autoincrement())
  customer_order_id    Int
  filename             String
  customerOrderDetails customer_order @relation(fields: [customer_order_id], references: [id], onDelete: Cascade)
}

model MasterBullion {
  id        Int               @id @default(autoincrement())
  name      String
  phone     String?
  address   String?
  purchases BullionPurchase[]
}

model BullionPurchase {
  id           Int           @id @default(autoincrement())
  bullion      MasterBullion @relation(fields: [bullionId], references: [id])
  bullionId    Int
  grams        Float
  touch        Float?
  purity       Float?
  rate         Float
  amount       Float
  balance      Float
  createdAt    DateTime      @default(now())
  givenDetails GivenDetail[]
}

model GivenDetail {
  id              Int             @id @default(autoincrement())
  amount          Float
  grams           Float
  touch           Float?
  purity          Float?
  bullionPurchase BullionPurchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId      Int
}

model Goldsmith {
  id         Int            @id @default(autoincrement())
  name       String
  phone      String?
  address    String?
  jobcards   Jobcard[]       
  givenGold  givenGold[]      
  deliveries itemDelivery[]   
  received   Receivedsection[]
  totals     Total[]   
  repairs    Repair[]
  summaries  Balances[]       
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
}

model Jobcard {
  id            Int          @id @default(autoincrement())
  goldsmithId   Int
  goldsmith     Goldsmith    @relation(fields: [goldsmithId], references: [id])
  description   String?
  givenGold     givenGold[]
  deliveries    itemDelivery[]  
  received      Receivedsection[]
  total         Total[] 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}
model givenGold{
  id              Int          @id @default(autoincrement())
  goldsmithId     Int?
  jobcardId       Int?
  weight          Float?
  touch           Float?
  purity          Float?
  goldsmith       Goldsmith?    @relation(fields: [goldsmithId], references: [id])
  jobcard         Jobcard?      @relation(fields: [jobcardId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
}

model itemDelivery {
  id               Int           @id @default(autoincrement())
  itemName         String?
  itemWeight       Float?
  touch            Float?
  sealName         String?
  netWeight        Float?
  wastageType      String?
  wastageValue     Float?
  finalPurity      Float?
  goldsmithId      Int?
  goldsmith        Goldsmith?    @relation(fields: [goldsmithId], references: [id])
  jobcardId        Int?
  jobcard          Jobcard?      @relation(fields: [jobcardId], references: [id])
  deduction        deduction[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
}
model deduction{
  id               Int           @id @default(autoincrement())
  type             String?
  deliveryId       Int
  weight           Float?
  stoneWt          Float?
  itemDelivery     itemDelivery  @relation(fields: [deliveryId ], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())

}
model Total {
  id              Int         @id @default(autoincrement())
  jobcardId       Int?
  jobcard         Jobcard?      @relation(fields: [jobcardId], references: [id])
  goldsmithId     Int
  goldsmith       Goldsmith   @relation(fields: [goldsmithId], references: [id])
  givenTotal      Float?
  deliveryTotal   Float?
  stoneTotalWt    Float?
  openingBalance  Float?
  jobCardBalance  Float?
  receivedTotal   Float?
  isFinished      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
}

model Receivedsection {
  id          Int       @id @default(autoincrement())
  weight      Float?
  touch       Float?
  purity      Float?
  jobcardId   Int    
  goldsmithId Int
  jobcard     Jobcard?  @relation(fields: [jobcardId], references: [id])
  goldsmith   Goldsmith? @relation(fields: [goldsmithId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Balances {
  id                  Int         @id @default(autoincrement())
  goldsmithId         Int
  goldsmith           Goldsmith   @relation(fields: [goldsmithId], references: [id])
  totalDeliveries     Int
  totalItemWeight     Float
  totalNetWeight      Float
  totalPurity         Float
  totalReceivedWeight Float
  totalReceivedTouch  Float
  totalReceivedPurity Float
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now())
}

enum WastageType {
  PERCENTAGE @map("%")
  ADDITION   @map("+")
  TOUCH      @map("Touch")
}

model Repair {
  id            Int        @id @default(autoincrement())
  goldsmithId   Int
  goldsmith     Goldsmith  @relation(fields: [goldsmithId], references: [id])
  givenWeights  Json
  totalGiven    Float
  itemWeights   Json
  totalItem     Float
  stone         Float
  wastageType   String
  touch         Float
  netWeight     Float
  createdAt     DateTime   @default(now())
}
